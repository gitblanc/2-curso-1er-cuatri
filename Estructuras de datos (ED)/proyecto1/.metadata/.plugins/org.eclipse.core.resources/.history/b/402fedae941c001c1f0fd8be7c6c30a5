/**
 * 
 */
package proyecto1;

/**
 * @author blanc
 *
 */
public class Algoritmos {

	// RECURSIVOS

	public static double fact(double n) {
		donothing();
		if (n == 0)
			return 1;
		return fact(n - 1) * n;

	}

	public static double pot2(double n) {
		if (n == 0)
			return 1;
		return 2 * pot2(n - 1);
	}

	public static double fibo(double n) {
		if (n == 1)
			return 0;
		else if (n == 2)
			return 1;
		return fibo(n - 1) + fibo(n - 2);
	}

	// ITERATIVOS

	public static double factI(double n) {
		double num = 1;
		for (int i = 1; i <= n; i++) {
			num = num * i;
		}
		return num;

	}

	public static double pot2I(double n) {
		if (n == 0)
			return (double) 1;
		double num = 1;
		for (int i = 1; i <= n; i++) {
			num = num * 2;
		}
		return num;

	}

	public static double fiboI(double n) {
		if (n == 1)
			return (double) 0;
		if (n == 2)
			return (double) 1;
		double num = 1;
		double anterior = 0;
		double siguiente = 0;
		for (int i = 3; i <= n; i++) {
			anterior = siguiente;
			siguiente = num;
			num = num + anterior;

		}
		return num;
	}

	public static void lineal(int n) {
		for (int i = 0; i < n; i++) {
			donothing();
		}
	}

	public static void cuadratica(int n) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; i < n; i++) {
				donothing();
			}
		}
	}

	public static void cubica(int n) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; i < n; i++) {
				for (int k = 0; i < n; i++) {
					donothing();
				}
			}
		}
	}
	
	public static void logaritmica(int n) {
		while(n > 0) {
			donothing();
			n=n/2;
		}
	}

	private static void donothing() {
		try {
			Thread.sleep(250);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
