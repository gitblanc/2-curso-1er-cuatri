/**
 * 
 */
package proyecto1;

/**
 * @author blanc
 *
 */
public class Algoritmos {

	// RECURSIVOS

	public static double factorialRecursivo(double n) {
		doNothing();
		if (n == 0)
			return 1;
		return factorialRecursivo(n - 1) * n;

	}

	public static double potenciaRecursiva_v1(double n) {
		if (n == 0)
			return 1;
		return 2 * potenciaRecursiva_v1(n - 1);
	}
	
	public static double potenciaRecursiva_v2(double n) {
		if (n == 0)
			return 1;
		return 2 * potenciaRecursiva_v1(n - 1) + potenciaRecursiva_v2(n/2);
	}

	public static double fibonacciRecursivo(double n) {
		if (n == 1)
			return 0;
		else if (n == 2)
			return 1;
		return fibonacciRecursivo(n - 1) + fibonacciRecursivo(n - 2);
	}

	// ITERATIVOS

	public static double factorialIterativo(double n) {
		double num = 1;
		for (int i = 1; i <= n; i++) {
			num = num * i;
		}
		return num;

	}

	public static double potenciaIterativa(double n) {
		if (n == 0)
			return (double) 1;
		double num = 1;
		for (int i = 1; i <= n; i++) {
			num = num * 2;
		}
		return num;

	}

	public static double fibonacciIterativo(double n) {
		if (n == 1)
			return (double) 0;
		if (n == 2)
			return (double) 1;
		double num = 1;
		double anterior = 0;
		double siguiente = 0;
		for (int i = 3; i <= n; i++) {
			anterior = siguiente;
			siguiente = num;
			num = num + anterior;

		}
		return num;
	}

	//Sin el doNothing
	
	//Con el doNothing
	public static void linealdoNothing(double n) {
		for (int i = 0; i < n; i++) {
			doNothing();
		}
	}

	public static void cuadraticaNothing(double n) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				doNothing();
			}
		}
	}

	public static void cubicaNothing(double n) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				for (int k = 0; k < n; k++) {
					doNothing();
				}
			}
		}
	}
	
	public static void logaritmicaNothing(double n) {
		int num = (int)n;
		while(num > 0) {
			doNothing();
			num=num/2;
		}
	}

	private static void doNothing() {
		try {
			Thread.sleep(250);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	//varias versiones de potencias recursivas
	
	public static int potenciaRecursiva_v1doNothing(int n) {
		
	}

}
