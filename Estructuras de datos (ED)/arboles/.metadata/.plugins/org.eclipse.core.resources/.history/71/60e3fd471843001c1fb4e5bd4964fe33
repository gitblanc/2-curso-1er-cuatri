package AVL;

import BST.BSTNode;

public class AVLTree<T extends Comparable<T>> {
	private AVLNode<T> raiz;

	public AVLTree() {
		this.raiz = null;
	}
	
	public AVLNode<T> searchNode(T clave){
		if (clave == null || this.raiz == null) {
			return null;
		}
		return searchNodeRecursivo(raiz, clave);
	}

	private BSTNode<T> searchNodeRecursivo(BSTNode<T> raiz2, T clave) {
		if (raiz2 == null) {
			return null;
		}
		// COMPARE TO devuelve > 0 si obj1 > obj2
		// devuelve < 0 si obj1 < obj2
		// devuelve = 0 si obj1 = obj2
		else if (raiz2.getInfo().compareTo(clave) > 0) {// si la clave es menor que el nodo
														// busca por la izquierda
			return searchNodeRecursivo(raiz2.getLeft(), clave);
		} else if (raiz2.getInfo().compareTo(clave) < 0) {// si la clave es mayor que el
															// nodo busca por la derecha
			return searchNodeRecursivo(raiz2.getRight(), clave);
		} else if (raiz2.getInfo().compareTo(clave) == 0) {// si la clave es igual que el nodo lo devuelve
			return raiz2;
		} else {// si no lo encuentra devuelve null
			return null;
		}
	}//puedo copiar el metodo de bstree
	
	public int addNode(T clave) {}
	
	public String preOrder() {}
	
	public String postOrder() {}
	
	public String inOrder() {}
	
	public int removeNode(T clave) {}
}
