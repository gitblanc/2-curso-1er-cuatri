import static org.junit.Assert.assertEquals;

import org.junit.Assert;
import org.junit.Test;




public class GraphPruebasAlumnos {

	@Test
	public void testAddNode() {
		// Creamos un vector de nodos con tamaño 2
		Graph<Integer> graph = new Graph<Integer>(2);
		
	
		
		// Caso 1 - Añadimos el nodo al vector
		Assert.assertEquals(0, graph.getSize());
		Assert.assertEquals(0, graph.addNode(1));
		Assert.assertEquals(1, graph.getSize());
		Assert.assertEquals(0, graph.getNode(1));
	 
		
				
		
		System.out.println("AÑADIR NODO\nGrafo completo-->"+graph.toString());
		
		

	}

	@Test
	public void testGetNode() {
		// Creamos un vector de nodos con tamaño 2
		Graph<Integer> graph = new Graph<Integer>(2);
		Assert.assertEquals(graph.addNode(1),0);
		Assert.assertEquals(graph.addNode(2), 0);
		
		// Caso 1 - El nodo existe
		Assert.assertEquals(graph.getNode(2), 1);
		
		
		
	}
	
	@Test
	public void testExistNode() {
		// Creamos un vector de nodos con tamaño 2
		Graph<Integer> graph = new Graph<Integer>(2);
		graph.addNode(1);
		graph.addNode(2);
		
		// Caso 1 - El nodo existe
		Assert.assertTrue(graph.existsNode(2));
				
		// Caso 2 - El nodo no existe
		Assert.assertFalse(graph.existsNode(5));
		
		// Caso 3 - El nodo es null
		Assert.assertFalse(graph.existsNode(null));
	}
	
	
	@Test
	public void testAddEdge(){
		Graph<Integer> graph = new Graph<Integer>(5);
		
		// No hay nodos
		Assert.assertEquals(-3, graph.addEdge(1, 2, 1));
		
		Assert.assertEquals(graph.addNode(1), 0);
		Assert.assertEquals(graph.addNode(2), 0);
		Assert.assertEquals(graph.addNode(3), 0);
		Assert.assertEquals(graph.addNode(4), 0);
		Assert.assertEquals(graph.addNode(5), 0);
		Assert.assertEquals(graph.addEdge(1, 2, 1), 0);;
		Assert.assertEquals(graph.addEdge(1, 5, 10), 0);;
		Assert.assertEquals(graph.addEdge(1, 4, 3), 0);;
		Assert.assertEquals(graph.addEdge(2, 3, 5), 0);;
		Assert.assertEquals(graph.addEdge(2, 2, 4), 0);;
		Assert.assertEquals(graph.addEdge(3, 5, 1), 0);;
		Assert.assertEquals(graph.addEdge(4, 3, 2), 0);;
		//Peso negativo
		Assert.assertEquals(-8, graph.addEdge(4, 3, -6));
		
		
		System.out.print("AÑADIR ARISTA \n Grafo completo-->"+graph.toString());
		Assert.assertArrayEquals(graph.getWeights() ,new double[][]{{0.0, 1.0, 0.0, 3.0, 10.0 },
			{0, 4.0, 5.0, 0.0, 0.0},
			{0.0, 0.0, 0.0, 0.0, 1.0},
			{0.0,0.0, 2, 0.0, 0.0},
			{0.0, 0.0, 0.0, 0.0, 0.0}}
);
		Assert.assertArrayEquals(graph.getEdges() ,new boolean[][]{{false, true, false, true, true },
			{false, true, true, false, false},
			{false, false, false, false, true},
			{false,false, true, false, false},
			{false, false, false, false, false}}
		
		
);
				
		
	}
	
	
	@Test
	public void testGetEdge() {
		// Creamos un vector de nodos con tamaño 2
		Graph<Integer> graph = new Graph<Integer>(2);
		graph.addNode(1);
		graph.addNode(2);
		
		
		
		// Caso 1 - No existe la arista
		Assert.assertEquals(graph.getEdge(1, 2), -4, 0.0);
		
		
		// Caso existe la arista
		graph.addEdge(1, 2, 3);
		Assert.assertEquals(graph.getEdge(1, 2), 3, 0.0);
		
		
		
		
	}
	
	@Test
	public void testExistEdge(){
		Graph<Integer> graph = new Graph<Integer>(5);
		Assert.assertEquals(graph.addNode(1), 0);
		Assert.assertEquals(graph.addNode(2), 0);
		Assert.assertEquals(graph.addNode(3), 0);
		Assert.assertEquals(graph.addNode(4), 0);
		Assert.assertEquals(graph.addNode(5), 0);
		graph.addEdge(1, 2, 1);
		graph.addEdge(1, 5, 10);
		graph.addEdge(2, 3, 5);
		graph.addEdge(3, 5, 1);
		graph.addEdge(4, 3, 2);
		
		// Los caminos existen
		Assert.assertTrue(graph.existEdge(1,2));
		Assert.assertTrue(graph.existEdge(1,5));
		Assert.assertTrue(graph.existEdge(2,3));
		Assert.assertTrue(graph.existEdge(3,5));
		Assert.assertTrue(graph.existEdge(4,3));
		
		
	}
	
	@Test
	public void testRemoveEdge(){
		Graph<Integer> graph = new Graph<Integer>(5);
		Assert.assertEquals(graph.addNode(1),0);
		Assert.assertEquals(graph.addNode(2),0);
		Assert.assertEquals(graph.addNode(3),0);
		Assert.assertEquals(graph.addNode(4),0);
		Assert.assertEquals(graph.addNode(5),0);
		Assert.assertEquals(graph.addEdge(1, 2, 1),0);
		Assert.assertEquals(graph.addEdge(1, 5, 10),0);
		Assert.assertEquals(graph.addEdge(2, 3, 5),0);
		Assert.assertEquals(graph.addEdge(3, 5, 1),0);
		Assert.assertEquals(graph.addEdge(4, 3, 2),0);
		
		System.out.print("BORRAR ARISTA \n Grafo completo inicial-->"+graph.toString());
		
		
		
		
		
		// Caso 1 - la arista existe
		Assert.assertEquals(0, graph.removeEdge(1, 2));
		
		Assert.assertEquals(0, graph.removeEdge(1, 5));
		
		Assert.assertEquals(0, graph.removeEdge(2, 3));
		
		Assert.assertEquals(0, graph.removeEdge(3, 5));
		
		Assert.assertEquals(0, graph.removeEdge(4, 3));
		
		System.out.print("BORRAR ARISTA \n Grafo completo final-->"+graph.toString());
		
		Assert.assertArrayEquals(graph.getweigths() ,new double[][]{{0.0, 0.0, 0.0, 0.0, 0.0 },
			{0, 0.0, 0.0, 0.0, 0.0},
			{0.0, 0.0, 0.0, 0.0, 0.0},
			{0.0,0.0, 0.0, 0.0, 0.0},
			{0.0, 0.0, 0.0, 0.0, 0.0}}
);
		Assert.assertArrayEquals(graph.getEdges() ,new boolean[][]{{false, false, false, false, false },
			{false, false, false, false, false},
			{false, false, false, false, false},
			{false, false, false, false, false},
			{false, false, false, false, false}}
		
		
);
		
		
	}
	
	
	
	
	@Test
	public void testRemoveNode(){
		Graph<Integer> graph1 = new Graph<Integer>(4);
		
		graph1.addNode(1);
		graph1.addNode(2);
		graph1.addNode(3);
		graph1.addNode(4);
		
		graph1.addEdge(1, 3, 1);
		graph1.addEdge(1, 2, 2);
		graph1.addEdge(3, 2, 4);
		
		
		System.out.print("BORRAR NODO\n Grafo1  completo Inicial-->"+graph1.toString());
		
		// Caso 1 - Eliminar cualquier nodo que no ocupe la última posición
		Assert.assertEquals(0, graph1.removeNode(2));
		Assert.assertFalse(graph1.existNode(2));
		
		
		
		System.out.print("BORRAR NODO\n Grafo1 completo Final-->"+graph1.toString());
		
		
		  
		
		
	
 }
	
	
	
	
	
	
	
	
	
	

	@Test
	public void testGetSize() {
		// Creamos un vector de nodos con tamaño 2
		Graph<Integer> graph = new Graph<Integer>(2);
		
		// No hay nodos en el vector (vacío)
		Assert.assertEquals(graph.getSize(), 0);
		
		// Añadimos el primer nodo
		graph.addNode(1);
		Assert.assertEquals(graph.getSize(), 1);
		// Añadimos el segundo nodo
		graph.addNode(2);
		Assert.assertEquals(graph.getSize(), 2);
	}
	
	
	
	
	
	
	
	
	
	
}
