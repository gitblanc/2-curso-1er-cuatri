package grafo;

import java.text.DecimalFormat;

/**
 *
 */

/**
 * @author blanc
 *
 */
public class Graph<T> {
	private double[][] weights; // pesos de las aristas
	private boolean[][] edges; // matriz de aristas
	private T[] nodes; // nodos
	private int size; // numero de vértices o tamaño útil
	private double[][] a;
	private T[][] p;
	private String cadena;

	@SuppressWarnings("unchecked")
	public Graph(int dimension) {
		this.nodes = (T[]) new Object[dimension];
		this.weights = new double[dimension][dimension];
		this.edges = new boolean[dimension][dimension];
		this.size = 0; // no hay vértices
		this.cadena = "";
	}

	/*
	 * Devuelve el número de vértices
	 */
	public int getSize() {
		return this.size;
	}

	/*
	 * Devuelve la matriz de pesos
	 */
	public double[][] getWeights() {
		return (this.weights);
	}

	/*
	 * Devuelve la matriz de aristas
	 */
	public boolean[][] getEdges() {
		return (this.edges);
	}

	/*
	 * Devuelve la posición del nodo pasado como parámetro dentro del vector de
	 * nodos y 1 si el nodo no existe
	 */
	protected int getNode(T node) {
		for (int i = 0; i < nodes.length; i++) {
			if (node.equals(nodes[i])) {
				return i;
			}
		}
		return -1;
	}

	/*
	 * Indica si existe (true) o no (false) el nodo en el grafo
	 */
	public boolean existsNode(T node) {
		if (node == null) {
			return false;
		}
		int pos = getNode(node);
		if (pos == -1)
			return false;
		else
			return true;
	}

	/*
	 * Inserta un nuevo nodo que se le pasa como parámetro. Si lo inserta devuelve 0
	 * . Si ya existe y además no cabe, no lo inserta y devuelve -3. Si ya existe,
	 * pero sí cabría, no lo inserta y devuelve -1. Si no existe, pero no cabe, no
	 * lo inserta y devuelve -2. Si el nodo a insertar no es válido, devuelve -4 en
	 * cualquier caso.
	 */
	public int addNode(T node) {
		if (size < nodes.length && getNode(node) == -1) {
			nodes[size] = node;
			for (int i = 0; i <= size; i++) {
				edges[size][i] = false;
				edges[i][size] = false;
				weights[size][i] = 0;
				weights[i][size] = 0;
			}
			++size;
			return 0;
		} else if (existsNode(node) && size >= nodes.length) {
			return -3;
		} else if (existsNode(node) && size < nodes.length) {
			return -1;
		} else if (!existsNode(node) && size >= nodes.length) {
			return -2;
		} else {
			return -4;
		}
	}

	/*
	 * Devuelve true si existe una arista entre los nodos origen y destino, false en
	 * caso contrario o no existen los nodos
	 */
	public boolean existEdge(T source, T target) {
		int i = getNode(source);
		int j = getNode(target);
		if (i >= 0 && j >= 0)
			return edges[i][j];
		else
			return false;
	}

	/*
	 * Devuelve el peso de la arista que une el nodo origen y el nodos destino.
	 * devuelve 1, 2 y 3 si no existe origen, destino, ambos. Devuelve 4 si no
	 * existe la arista.
	 */
	public double getEdge(T source, T target) {

		if (!existsNode(target) && !existsNode(source)) {
			return -3;
		} else if (!existsNode(source)) {
			return -1;
		} else if (!existsNode(target)) {
			return -2;
		} else if (!existEdge(source, target)) {
			return -4;
		} else {
			return weights[getNode(source)][getNode(target)];
		}
	}

	/*
	 * Inserta una arista con el peso indicado (> 0) entre dos nodos. Devuelve 0 si
	 * la inserta. Devuelve 1, 2 y 3 si no existe nodos origen, destino o ambos
	 * respectivamente. Devuelve 4 si ya existe y 8 si el peso no es válido
	 */
	public int addEdge(T source, T target, double weight) {
		int i = getNode(source);
		int j = getNode(target);
		if (existEdge(source, target) && weight > 0) {
			return -4;
		} else if (!existsNode(target) && !existsNode(source)) {
			return -3;
		} else if (!existsNode(source)) {
			return -1;
		} else if (!existsNode(target)) {
			return -2;
		} else if (weight < 0) {
			return -8;
		} else {
			edges[i][j] = true;
			weights[i][j] = weight;
			return 0;
		}
	}

	/*
	 * Borra una arista del grafo que conecta dos nodos. Devuelve 1, 2 y 3 si no
	 * existe nodos origen, destino o ambos respectivamente. Devuelve 4 si no existe
	 * la arista. Devuelve 0 si la borra
	 */
	public int removeEdge(T source, T target) {
		if (!existsNode(source) && !existsNode(target)) {
			return -3;
		} else if (!existsNode(source)) {
			return -1;
		} else if (!existsNode(target)) {
			return -2;
		} else if (!existEdge(source, target)) {
			return -4;
		} else {
			edges[getNode(source)][getNode(target)] = false;
			weights[getNode(source)][getNode(target)] = 0;
			return 0;
		}
	}

	/*
	 * Método que elimina un nodo. Devuelve 0 si borra el nodo correctamente y 1 en
	 * caso contrario
	 */
	public int removeNode(T node) {
		int i = getNode(node);

		if (i >= 0) {
			--size;
			if (i != size + 1) { // no es el último nodo
				nodes[i] = nodes[size];
			}

			for (int j = 0; j <= size; j++) {
				edges[j][i] = edges[j][size];
				edges[i][j] = edges[size][j];
				weights[i][j] = weights[size][j];
				weights[j][i] = weights[j][size];
			}
			edges[i][i] = edges[size][size]; // elimina el codo
			weights[i][i] = weights[size][size];
			return 0;
		}
		return -1;
	}

	/*
	 * toString()
	 */
	public String toString() {
		DecimalFormat df = new DecimalFormat("#.##");
		String cadena = "";
		cadena += "NODOS\n";
		for (int i = 0; i < size; i++) {
			cadena += nodes[i].toString() + "\t";
		}
		cadena += "\n\nARISTAS\n";
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				if (edges[i][j])
					cadena += "T\t";
				else
					cadena += "F\t";
			}
			cadena += "\n";
		}
		cadena += "\nPESOS\n";
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				cadena += (edges[i][j] ? df.format(weights[i][j]) : "-") + "\t";
			}
			cadena += "\n";
		}
		return cadena;
	}

	/*
	 * Algoritmo que calcula la ruta más barata desde un nodo origen dado hasta el
	 * sumidero.
	 */
	public double[] dijkstra(T origen) {
		if (!existsNode(origen))
			return null;
		double[] costes = inicializaCostes(origen);
		T[] caminos = inicializaCaminos(origen);
		boolean[] s = new boolean[this.size];// visitados
		s[getNode(origen)] = true;
		int w = getPivote(s, costes);// coge el nodo con menor coste y no alcanzado

		while (w != -1) {
			s[w] = true;
			for (int m = 0; m < size; m++) {
				if (!s[m] && existEdge(nodes[w], nodes[m])) {
					if ((costes[w] + weights[w][m]) < costes[m]) {
						costes[m] = costes[w] + weights[w][m];
						caminos[m] = nodes[w];
					}
				}
			}
			w = getPivote(s, costes);
		}
		return costes;
	}

	/*
	 * Método que devuelve el pivote para dijkstra
	 */
	private int getPivote(boolean[] s, double[] costes) {
		double masbarato = Double.POSITIVE_INFINITY;
		int posicion = -1;// devuelve -1 cuando todos los nodos están visitados
		for (int i = 0; i < this.size; i++) {
			if (costes[i] < masbarato && !s[i]) {
				posicion = i;
				masbarato = costes[i];
			}
		}
		return posicion;
	}

	/*
	 * Inicializa el vector de costes. Ir de un nodo a sí mismo cuesta 0, si ya
	 * existe la arista se corresponde con su peso y si no existe es infinito
	 */
	public double[] inicializaCostes(T origen) {
		double[] costes = new double[this.size];
		for (int i = 0; i < this.size; i++) {
			if (nodes[i].equals(origen)) {
				costes[i] = 0;
			} else if (existEdge(origen, nodes[i])) {
				costes[i] = getEdge(origen, nodes[i]);
			} else {
				costes[i] = Double.POSITIVE_INFINITY;
			}
		}
		return costes;
	}

	/*
	 * Si el destino es igual al origen o existe la arista origen y destino, el
	 * camino es el nodo origen, sino es null
	 */
	public T[] inicializaCaminos(T origen) {
		@SuppressWarnings("unchecked")
		T[] caminos = (T[]) new Object[this.size];
		for (int i = 0; i < this.size; i++) {
			if (nodes[i].equals(origen) || existEdge(origen, nodes[i]))
				caminos[i] = origen;
		}
		return caminos;
	}

	/*
	 * Método que implementa el algoritmo de Floyd según el visto en clase de teoría
	 * y que devuelve 0 si genera las matrices A(costes) y P(caminos), ‐1 en caso
	 * contrario
	 */
	public int floyd() {
		if (this.size <= 0)
			return -1;
		double[][] matrizA = inicializaFloydA();
		T[][] matrizP = inicializaFloydP();
		for (int pivote = 0; pivote < size; pivote++) {
			for (int source = 0; source < size; source++) {
				for (int target = 0; target < size; target++) {
					if (matrizA[source][pivote] + matrizA[pivote][target] < matrizA[source][target]) {
						matrizA[source][target] = matrizA[source][pivote] + matrizA[pivote][target];
						matrizP[source][target] = nodes[pivote];
					}
				}
			}
		}
		this.a = matrizA;
		this.p = matrizP;
		return 0;
	}

	/*
	 * Método que inicializa la matriz P o de caminos con todos ellos a null.
	 */
	private T[][] inicializaFloydP() {
		@SuppressWarnings("unchecked")
		T[][] p = (T[][]) new Object[this.size][this.size];
		for (int i = 0; i < this.size; i++) {
			for (int j = 0; j < this.size; j++) {
				p[i][j] = null;
			}
		}
		return p;
	}

	/*
	 * Método que inicializa la matriz A o de costes colocando un 0 en la diagonal
	 * principal, el peso si es distinto de 0 o infinito en otro caso
	 */
	private double[][] inicializaFloydA() {
		double[][] matrizA = new double[this.size][this.size];
		for (int i = 0; i < this.size; i++) {
			for (int j = 0; j < this.size; j++) {
				if (i == j) {
					matrizA[i][j] = 0;
				} else if (this.weights[i][j] > 0) {
					matrizA[i][j] = this.weights[i][j];
				} else {
					matrizA[i][j] = Double.POSITIVE_INFINITY;
				}
			}
		}
		return matrizA;
	}

	/*
	 * Método que devuelve la matriz A o de costes
	 */
	protected double[][] getFloydA() {
		return this.a;

	}

	/*
	 * Método que devuelve la matriz P o de caminos
	 */
	protected T[][] getFloydP() {
		return this.p;
	}

	/*
	 * Método que devuelve el coste mínimo entre el nodo origen y destino
	 */
	protected double minCostPath(T nodoOrigen, T nodoDestino) {
		if (nodoDestino == null || nodoOrigen == null || !existsNode(nodoOrigen) || !existsNode(nodoDestino)) {
			return Double.POSITIVE_INFINITY;
		} else if (this.a == null) {
			floyd();
		}
		return getFloydA()[getNode(nodoOrigen)][getNode(nodoDestino)];
	}

	/*
	 * Método que devuelve una cadena con el camino del coste mínimo entre el nodo
	 * origen y el nodo destino.
	 */
	protected String path(T nodoOrigen, T nodoDestino) {
		String cadena = "";
		if (nodoOrigen.equals(nodoDestino)) {
			cadena = nodoOrigen.toString();
		} else if (minCostPath(nodoOrigen, nodoDestino) == Double.POSITIVE_INFINITY) {
			cadena = nodoOrigen.toString() + "\t" + Double.POSITIVE_INFINITY + "\t" + nodoDestino.toString();
		} else {
			cadena += nodoOrigen.toString() + recursivo(nodoOrigen, nodoDestino) + nodoDestino.toString();// importante
																											// usar el
																											// toString
																											// para todo
																											// tipo de
																											// objeto
		}
		return cadena;
	}

	/*
	 * Método privado que se autollama X veces hasta que haya un coste en la arista
	 * entre nodo origen y destino, habiendo un camino directo
	 */
	private String recursivo(T nodoOrigen, T nodoDestino) {
		String cadena = "";
		if (this.p == null) {
			floyd();
		}
		T k = this.p[getNode(nodoOrigen)][getNode(nodoDestino)];
		if (k != null && (nodoOrigen != k && nodoDestino != k)) {
			cadena += recursivo(nodoOrigen, k) + k.toString() + recursivo(k, nodoDestino);
		} else {// si k es null llama a minCostPath porque al ser p null hay un coste en esa
				// arista/hay un camino directo
			cadena += "\t(" + minCostPath(nodoOrigen, nodoDestino) + ")\t";
		}
		return cadena;
	}

	/*
	 * Método extra hecho en clase que permite saber si el grafo es fuertemente
	 * conexo
	 */
	public boolean esConexo() {
		floyd();
		for (int i = 0; i < this.size; i++) {
			for (int j = 0; j < this.size; j++) {
				if (a[i][j] == 0) {
					return false;
				}
			}
		}
		return true;
	}

	public int contarSumideros() {
		int sumideros = 0;
		int posiciones = 0;
		boolean alMenosUno = false;
		for (int i = 0; i < this.size; i++) {
			for (int j = 0; j < this.size; j++) {
				if (!edges[i][j]) {
					posiciones++;
				}
				if (edges[j][i]) {
					alMenosUno = true;
				}
				if (posiciones == this.size && alMenosUno) {
					sumideros++;
				}
			}
		}
		return sumideros;
	}

	/*
	 * toString() para algoritmo floyd()
	 */
	public String floydToString() {
		int numNodes = size;
		String cadena = " ";
		DecimalFormat df = new DecimalFormat("#.##");

		double[][] aFloyd = getFloydA();
		if (aFloyd != null) {
			cadena += "\nAFloyd\n";
			for (int i = 0; i < numNodes; i++) {
				for (int j = 0; j < numNodes; j++) {
					cadena += df.format(aFloyd[i][j]) + "\t";
				}
				cadena += "\n";
			}
		}

		T[][] pFloyd = getFloydP();
		if (pFloyd != null) {
			cadena += "\nPFloyd\n";
			for (int i = 0; i < numNodes; i++) {
				for (int j = 0; j < numNodes; j++) {
					if (pFloyd[i][j] == null)
						cadena += "-" + "\t";

					else
						cadena += pFloyd[i][j].toString() + "\t";
				}
				cadena += "\n";
			}
		}
		return cadena;

	}

	/*
	 * Método que lanza el recorrido en profundidad de un grafo desde un nodo
	 * determinado. Si no existe el nodo parámetro devuelve una cadena vacía.
	 */
	public String recorridoProfundidad(T nodo) {
		if (getNode(nodo) == -1 || nodo == null) {
			return "";
		}
		boolean[] visitados = new boolean[this.size];
		recursivoProfundidad(nodo, visitados);
		return cadena;
	}

	/*
	 * Método privado que pone el nodo pasado como parámetro a True(visitado) y
	 * comprueba si existe caminos para el resto de nodos que no hayan sido
	 * visitados. Va guardando el recorrido en un String que finalmente devuelve
	 */
	private void recursivoProfundidad(T source, boolean[] visited) {
		visited[getNode(source)] = true;
		cadena += source.toString() + "\t";
		// for each node w accessible from v do
		for (int i = 0; i < this.size; i++) {
			if (!visited[i] && existEdge(source, this.nodes[i]))
				recursivoProfundidad(nodes[i], visited);
		}
	}

}
