import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

/**
 * 
 */

/**
 * @author blanc
 *
 */
class Tests {
	Graph<Integer> graph;

	@Test
	//El vector de nodos está vacío, devuelve -1
	void testGetNode() {
		graph = new Graph<Integer>(10);
		Integer num1 = 1;
		Integer num2 = 2;
		Integer num3 = 3;
		assertEquals(-1, graph.getNode(num1));
		assertEquals(-1, graph.getNode(num2));
		assertEquals(-1, graph.getNode(num3));
		//Se añaden 3 objectos al vector de nodos, devuelve sus posiciones correspondientes
		graph.addNode(num1);
		graph.addNode(num2);
		graph.addNode(num3);
		assertEquals(0, graph.getNode(num1));
		assertEquals(1, graph.getNode(num2));
		assertEquals(2, graph.getNode(num3));
	}
	

	@Test
	//El vector de nodos está vacío, devuelve false
	void testExistsNode() {
		graph = new Graph<Integer>(10);
		Integer num1 = 1;
		Integer num2 = 2;
		Integer num3 = 3;
		assertEquals(false, graph.existsNode(num1));
		assertEquals(false, graph.existsNode(num2));
		assertEquals(false, graph.existsNode(num3));
		//El vector de nodos no está vacío, devuelve true
		graph.addNode(num1);
		graph.addNode(num2);
		graph.addNode(num3);
		assertEquals(true, graph.existsNode(num1));
		assertEquals(true, graph.existsNode(num2));
		assertEquals(true, graph.existsNode(num3));
	}
	
	@Test
	
	void testExistsNode2() {
		graph = new Graph<Integer>(10);
		Integer num1 = 1;
		Integer num2 = 2;
		Integer num3 = 3;
		
	}
	
	@Test
	//Se inserta un nodo de forma correcta -> devuelve 0
	void testAddNode1() {
		graph = new Graph<Integer>(10);
		Integer num1 = 1;
		Integer num2 = 2;
		Integer num3 = 3;
		assertEquals(0,graph.addNode(num1));
		assertEquals(0,graph.addNode(num2));
		assertEquals(0,graph.addNode(num3));
		assertEquals(true, graph.existsNode(num1));
		assertEquals(true, graph.existsNode(num2));
		assertEquals(true, graph.existsNode(num3));
	}
	
	@Test
	//El nodo ya existía previamente y no cabe -> no lo inserta y devuelve -3
	void testAddNode2() {
		graph = new Graph<Integer>(3);
		Integer num1 = 1;
		Integer num2 = 2;
		Integer num3 = 3;
		assertEquals(0,graph.addNode(num1));
		assertEquals(0,graph.addNode(num2));
		assertEquals(0,graph.addNode(num3));
		assertEquals(true, graph.existsNode(num1));
		assertEquals(true, graph.existsNode(num2));
		assertEquals(true, graph.existsNode(num3));
		assertEquals(-3,graph.addNode(num1));
		
	}
}
